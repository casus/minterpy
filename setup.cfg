# This file is used to configure your project.
# Read more about the various options under:
# http://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files

[metadata]
name = minterpy
description = Classical interpolation in arbitrary dimensions.
version = file: VERSION
author = Uwe Hernandez Acosta
author-email = u.hernandez@hzdr.de
license = NOT-PUBLIC
long-description = file: README.md
long-description-content-type = text/markdown; charset=UTF-8; variant=GFM
# TODO
url = https://github.com/pyscaffold/pyscaffold/
project-urls =
Documentation =
# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers =
    Development Status :: 4 - Beta
    Programming Language :: Python
    Topic :: Scientific/Engineering :: Mathematics

[options]
zip_safe = False
packages = find:
; TODO package data?
include_package_data = True
package_dir =
    =src
# DON'T CHANGE THE FOLLOWING LINE! IT WILL BE UPDATED BY PYSCAFFOLD!
setup_requires = pyscaffold>=3.2a0,<3.3a0
# Add here dependencies of your project (semicolon/line-separated), e.g.
install_requires =
    numpy
    scipy>=0.48.0
    numba
;    for weighted regression (with regularisation)
    scikit-learn>=0.23.0
;    pytorch
;    TODO
;    matplotlib
;    h5py
# The usage of test_requires is discouraged, see `Dependency Management` docs
# tests_require = pytest; pytest-cov
# Require a specific Python version
# due to f'' format strings
python_requires = >=3.6

[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install minterpy[PDF]` like:
# PDF = ReportLab; RXP
# Add here test requirements (semicolon/line-separated)
testing =
    pytest
    pytest-cov
    matplotlib #this shall not be an test-requirement


[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = minterpy.module:function
# For example:
# console_scripts =
#     fibonacci = minterpy.skeleton:run
# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[test]
# py.test options when running `python setup.py test`
# addopts = --verbose
extras = True

[tool:pytest]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
addopts =
    --cov minterpy --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests

[aliases]
dists = bdist_wheel

[bdist_wheel]
; does not run on Python 2 and 3
universal = 0

[build_sphinx]
source_dir = docs
build_dir = build/sphinx

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no-vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 3.2.3
package = minterpy
extensions =
    no_skeleton
    pre_commit
    dsproject
